const searchUrl = `https://www.pinterest.com/search/pins/?q=${encodeURIComponent(keyword)}`;

  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      const response = await axios.get(searchUrl, {
        headers: {
          "User-Agent": userAgents[Math.floor(Math.random() * userAgents.length)],
          "Accept-Language": "en-US,en;q=0.9",
          Accept: "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
        },
        timeout: 30000,
      });

      const html = response.data;
      const $ = cheerio.load(html);
      const imageUrls = new Set();

      // Target img tags within pin containers
      $("div[data-test-id='pinWrapper'] img").each((_, element) => {
        let src = $(element).attr("src");
        if (!src) return;

        // Skip irrelevant content
        if (
          src.includes("/avatars/") ||
          src.includes("/user-default/") ||
          src.includes("/75x75/") ||
          src.includes("/gif/") ||
          src.includes("profile_images") ||
          src.includes("data:image") ||
          src.includes(".svg")
        ) {
          return;
        }

        // Convert to high-resolution by replacing size with /originals/
        src = src.replace(/\/\d+x\//, "/originals/");
        if (src.startsWith("//")) src = `https:${src}`;
        if (src.includes("pinimg.com")) imageUrls.add(src);
      });

      // Fallback: Extract from script tags containing JSON data
      $("script[type='application/ld+json']").each((_, element) => {
        try {
          const jsonData = JSON.parse($(element).html());
          if (jsonData.image && typeof jsonData.image === "string") {
            let imgUrl = jsonData.image;
            if (
              imgUrl.includes("pinimg.com") &&
              !imgUrl.includes("/75x75/") &&
              !imgUrl.includes("/avatars/") &&
              !imgUrl.includes(".svg")
            ) {
              imgUrl = imgUrl.replace(/\/\d+x\//, "/originals/");
              imageUrls.add(imgUrl);
            }
          }
        } catch (err) {
          console.warn("‚ö†Ô∏è Failed to parse JSON-LD:", err.message);
        }
      });

      // Convert Set to Array, shuffle, and limit to 4
      const allUrls = Array.from(imageUrls);
      if (allUrls.length === 0) {
        console.log("‚ùå No valid image URLs found.");
        return [];
      }
      const shuffledUrls = shuffleArray(allUrls).slice(0, 10);
      console.log(`‚úÖ Scraped ${allUrls.length} high-res image URLs, selected ${shuffledUrls.length} randomly.`);
      return shuffledUrls;
    } catch (err) {
      console.error(`‚ùå Attempt ${attempt} failed:`, err.message);
      if (attempt < retries) {
        console.log("üîÑ Retrying in 2 seconds...");
        await new Promise((res) => setTimeout(res, 2000));
      } else {
        console.log("‚ùå Giving up.");
        return [];
      }
    }
  }
}
